generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  ERROR
  MAINTENANCE
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  ACKNOWLEDGED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationChannelType {
  EMAIL
  SLACK
  IN_APP
}

enum NotificationEventType {
  AGENT_DOWN
  AGENT_ERROR
  TASK_FAILED
  TASK_COMPLETED
  WORKFLOW_FAILED
  WORKFLOW_COMPLETED
  SYSTEM_ERROR
  HEALTH_CHECK_FAILED
  PLATFORM_DISCONNECTED
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String
  role                    UserRole                 @default(VIEWER)
  name                    String?
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  inAppNotifications      InAppNotification[]
  notificationPreferences NotificationPreference[]
  notifications           Notification[]
  createdTasks            Task[]
  createdWorkflows        Workflow[]

  @@map("cubcen_users")
}

model Platform {
  id         String    @id @default(cuid())
  name       String
  type       String
  baseUrl    String
  status     String    @default("DISCONNECTED")
  authConfig String
  lastSyncAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  agents     Agent[]

  @@unique([name, type])
  @@map("cubcen_platforms")
}

model Agent {
  id            String         @id @default(cuid())
  name          String
  platformId    String
  externalId    String
  status        AgentStatus    @default(INACTIVE)
  capabilities  String
  configuration String
  healthStatus  String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  platform      Platform       @relation(fields: [platformId], references: [id], onDelete: Cascade)
  tasks         Task[]
  workflowSteps WorkflowStep[]

  @@unique([platformId, externalId])
  @@map("cubcen_agents")
}

model Task {
  id          String       @id @default(cuid())
  agentId     String
  workflowId  String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  name        String
  description String?
  parameters  String
  result      String?
  error       String?
  scheduledAt DateTime
  startedAt   DateTime?
  completedAt DateTime?
  retryCount  Int          @default(0)
  maxRetries  Int          @default(3)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation(fields: [createdBy], references: [id])
  workflow    Workflow?    @relation(fields: [workflowId], references: [id])
  agent       Agent        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("cubcen_tasks")
}

model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      String         @default("DRAFT")
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  tasks       Task[]
  steps       WorkflowStep[]
  creator     User           @relation(fields: [createdBy], references: [id])

  @@map("cubcen_workflows")
}

model WorkflowStep {
  id         String   @id @default(cuid())
  workflowId String
  agentId    String
  stepOrder  Int
  name       String
  parameters String
  conditions String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepOrder])
  @@map("cubcen_workflow_steps")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String
  message   String
  context   String?
  source    String
  timestamp DateTime @default(now())

  @@index([level, timestamp])
  @@index([source, timestamp])
  @@map("cubcen_system_logs")
}

model AgentHealth {
  id                String   @id @default(cuid())
  agentId           String
  status            String
  responseTime      Int?
  lastCheckAt       DateTime @default(now())
  errorCount        Int      @default(0)
  consecutiveErrors Int      @default(0)

  @@index([agentId, lastCheckAt])
  @@map("cubcen_agent_health")
}

model Metric {
  id        String   @id @default(cuid())
  type      String
  name      String
  value     Float
  tags      String?
  timestamp DateTime @default(now())

  @@index([type, timestamp])
  @@index([name, timestamp])
  @@map("cubcen_metrics")
}

model NotificationChannel {
  id            String                  @id @default(cuid())
  type          NotificationChannelType
  name          String
  enabled       Boolean                 @default(true)
  configuration String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@map("cubcen_notification_channels")
}

model NotificationPreference {
  id              String                @id @default(cuid())
  userId          String
  eventType       NotificationEventType
  channels        String
  enabled         Boolean               @default(true)
  escalationDelay Int?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventType])
  @@map("cubcen_notification_preferences")
}

model Notification {
  id             String                @id @default(cuid())
  eventType      NotificationEventType
  priority       NotificationPriority  @default(MEDIUM)
  status         NotificationStatus    @default(PENDING)
  title          String
  message        String
  data           String?
  userId         String?
  channels       String
  sentAt         DateTime?
  acknowledgedAt DateTime?
  acknowledgedBy String?
  retryCount     Int                   @default(0)
  maxRetries     Int                   @default(3)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  escalations    AlertEscalation[]
  user           User?                 @relation(fields: [userId], references: [id])

  @@index([eventType, status])
  @@index([userId, createdAt])
  @@map("cubcen_notifications")
}

model NotificationTemplate {
  id          String                  @id @default(cuid())
  eventType   NotificationEventType
  channelType NotificationChannelType
  subject     String
  template    String
  variables   String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  @@unique([eventType, channelType])
  @@map("cubcen_notification_templates")
}

model InAppNotification {
  id         String    @id @default(cuid())
  userId     String
  title      String
  message    String
  type       String    @default("info")
  read       Boolean   @default(false)
  actionUrl  String?
  actionText String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@map("cubcen_in_app_notifications")
}

model AlertEscalation {
  id             String       @id @default(cuid())
  notificationId String
  level          Int
  escalatedAt    DateTime     @default(now())
  escalatedTo    String
  acknowledged   Boolean      @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("cubcen_alert_escalations")
}
